import React, { useState } from 'react';
import { Plus, Filter, Download, MoreHorizontal, FileText, Clock, CheckCircle2, Circle, Archive, Search, Calendar, Users, AlertTriangle, Eye, Edit, Send, FileDown, Trash2, Shield, CheckSquare } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Sheet, SheetContent, SheetHeader, SheetTitle, SheetTrigger } from '@/components/ui/sheet';
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger, DropdownMenuSeparator } from '@/components/ui/dropdown-menu';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Checkbox } from '@/components/ui/checkbox';
import { AppLayout } from '@/components/layout/AppLayout';

// Enhanced contract data with multi-party support
const contracts = [
  {
    id: 1,
    title: "Recording Agreement - Drake",
    type: "Song",
    parties: [
      { name: "Drake", role: "Artist", percentage: 70, type: "Master" },
      { name: "OVO Sound", role: "Label", percentage: 30, type: "Master" },
      { name: "Drake", role: "Writer", percentage: 100, type: "Publishing" }
    ],
    splits: { master: "70/30", publishing: "100/0" },
    society: "ASCAP",
    status: "Fully Signed",
    updated: "2024-01-15",
    owner: "John Smith",
    expiryDate: "2025-01-15",
    isrc: "USRC12345678",
    territory: "Worldwide",
    recoupment: "Standard",
    attachments: ["ID_Document.pdf", "Schedule_A.pdf"],
    auditTrail: [
      { action: "Created", user: "John Smith", date: "2024-01-10", details: "Contract created from template" },
      { action: "Legal Review", user: "Legal Team", date: "2024-01-12", details: "Approved for signature" },
      { action: "Sent for Signature", user: "John Smith", date: "2024-01-13", details: "Sent to all parties via DocuSign" },
      { action: "Fully Signed", user: "System", date: "2024-01-15", details: "All parties have signed" }
    ]
  },
  {
    id: 2,
    title: "Distribution Deal - Universal",
    type: "Partnership/Distribution",
    parties: [
      { name: "Studio A", role: "Label", percentage: 60, type: "Revenue" },
      { name: "Universal Music", role: "Distributor", percentage: 40, type: "Revenue" }
    ],
    splits: { revenue: "60/40" },
    society: "BMI",
    status: "Out for Signature",
    updated: "2024-01-12",
    owner: "Sarah Johnson",
    expiryDate: "2026-01-12",
    territory: "North America",
    dspPlatforms: ["Spotify", "Apple Music", "Amazon Music"],
    marketingCommitments: "Standard",
    attachments: ["Distribution_Schedule.pdf"],
    auditTrail: [
      { action: "Created", user: "Sarah Johnson", date: "2024-01-10", details: "Contract created from template" },
      { action: "Manager Approval", user: "Mike Wilson", date: "2024-01-11", details: "Approved by manager" },
      { action: "Sent for Signature", user: "Sarah Johnson", date: "2024-01-12", details: "Sent to Universal Music" }
    ]
  },
  {
    id: 3,
    title: "Likeness Rights - Taylor Swift",
    type: "Image/Artist Likeness",
    parties: [
      { name: "Taylor Swift", role: "Artist", percentage: 85, type: "Usage Rights" },
      { name: "Brand Co", role: "Licensee", percentage: 15, type: "Usage Rights" }
    ],
    splits: { usage: "85/15" },
    society: "SESAC",
    status: "Draft",
    updated: "2024-01-10",
    owner: "Mike Wilson",
    expiryDate: "2024-07-10",
    territory: "United States",
    usageTerms: "Marketing and promotional materials",
    mediaTypes: ["Photos", "Videos", "Social Media"],
    attachments: ["Usage_Guidelines.pdf"],
    auditTrail: [
      { action: "Created", user: "Mike Wilson", date: "2024-01-10", details: "Contract created from template" }
    ]
  }
];

const getStatusIcon = (status: string) => {
  switch (status) {
    case 'Draft': return <Circle className="h-4 w-4" />;
    case 'Out for Signature': return <Clock className="h-4 w-4" />;
    case 'Partially Signed': return <CheckCircle2 className="h-4 w-4 text-yellow-500" />;
    case 'Fully Signed': return <CheckCircle2 className="h-4 w-4 text-green-500" />;
    case 'Archived': return <Archive className="h-4 w-4" />;
    default: return <Circle className="h-4 w-4" />;
  }
};

const getStatusColor = (status: string) => {
  switch (status) {
    case 'Draft': return 'bg-gray-100 text-gray-800';
    case 'Out for Signature': return 'bg-blue-100 text-blue-800';
    case 'Partially Signed': return 'bg-yellow-100 text-yellow-800';
    case 'Fully Signed': return 'bg-green-100 text-green-800';
    case 'Archived': return 'bg-gray-100 text-gray-600';
    default: return 'bg-gray-100 text-gray-800';
  }
};

const getExpiryStatus = (expiryDate: string) => {
  const expiry = new Date(expiryDate);
  const now = new Date();
  const daysUntilExpiry = Math.ceil((expiry.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));
  
  if (daysUntilExpiry < 0) return { status: 'expired', color: 'text-red-600', icon: <AlertTriangle className="h-4 w-4" /> };
  if (daysUntilExpiry <= 30) return { status: 'expiring', color: 'text-orange-600', icon: <AlertTriangle className="h-4 w-4" /> };
  if (daysUntilExpiry <= 90) return { status: 'warning', color: 'text-yellow-600', icon: <Clock className="h-4 w-4" /> };
  return { status: 'active', color: 'text-green-600', icon: <CheckCircle2 className="h-4 w-4" /> };
};

export default function Contracts() {
  const [selectedContract, setSelectedContract] = useState<any>(null);
  const [selectedContracts, setSelectedContracts] = useState<number[]>([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [contractType, setContractType] = useState('all-types');
  const [status, setStatus] = useState('all-status');
  const [society, setSociety] = useState('all-societies');
  const [showAdvancedFilters, setShowAdvancedFilters] = useState(false);

  const filteredContracts = contracts.filter(contract => {
    const matchesSearch = contract.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         contract.parties.some((p: any) => p.name.toLowerCase().includes(searchTerm.toLowerCase()));
    const matchesType = contractType === 'all-types' || contract.type.toLowerCase().includes(contractType.replace('-', '/').toLowerCase());
    const matchesStatus = status === 'all-status' || contract.status.toLowerCase().includes(status.replace('-', ' ').toLowerCase());
    const matchesSociety = society === 'all-societies' || contract.society === society;
    
    return matchesSearch && matchesType && matchesStatus && matchesSociety;
  });

  const handleContractSelection = (contractId: number, checked: boolean) => {
    if (checked) {
      setSelectedContracts([...selectedContracts, contractId]);
    } else {
      setSelectedContracts(selectedContracts.filter(id => id !== contractId));
    }
  };

  const handleBulkAction = (action: string) => {
    console.log(`Bulk action: ${action} on contracts:`, selectedContracts);
    // Implement bulk actions
  };

  return (
    <AppLayout>
      <div className="space-y-6">
        {/* Header */}
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-2xl font-semibold text-foreground">Contracts</h1>
            <p className="text-muted-foreground">Manage agreements, templates, and e-signatures</p>
          </div>
          <div className="flex gap-3">
            {selectedContracts.length > 0 && (
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button variant="outline" size="sm">
                    Bulk Actions ({selectedContracts.length})
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent>
                  <DropdownMenuItem onClick={() => handleBulkAction('export')}>
                    <Download className="h-4 w-4 mr-2" />
                    Export Selected
                  </DropdownMenuItem>
                  <DropdownMenuItem onClick={() => handleBulkAction('archive')}>
                    <Archive className="h-4 w-4 mr-2" />
                    Archive Selected
                  </DropdownMenuItem>
                  <DropdownMenuItem onClick={() => handleBulkAction('send-signature')}>
                    <Send className="h-4 w-4 mr-2" />
                    Send for Signature
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
            )}
            <Button variant="outline" size="sm">
              <Download className="h-4 w-4 mr-2" />
              Export All
            </Button>
            <Button size="sm">
              <Plus className="h-4 w-4 mr-2" />
              New Contract
            </Button>
          </div>
        </div>

        {/* Enhanced Filters & Search */}
        <Card>
          <CardHeader>
            <div className="flex items-center justify-between">
              <h3 className="text-lg font-medium">Search & Filters</h3>
              <Button 
                variant="ghost" 
                size="sm" 
                onClick={() => setShowAdvancedFilters(!showAdvancedFilters)}
              >
                <Filter className="h-4 w-4 mr-2" />
                {showAdvancedFilters ? 'Hide' : 'Show'} Advanced
              </Button>
            </div>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {/* Basic Filters */}
              <div className="flex flex-wrap gap-4">
                <div className="flex-1 min-w-[200px]">
                  <div className="relative">
                    <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                    <Input 
                      placeholder="Search contracts, parties, clauses..." 
                      className="pl-10 h-9"
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                    />
                  </div>
                </div>
                <Select value={contractType} onValueChange={setContractType}>
                  <SelectTrigger className="w-[160px] h-9">
                    <SelectValue placeholder="Contract Type" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all-types">All Types</SelectItem>
                    <SelectItem value="song">Song</SelectItem>
                    <SelectItem value="partnership">Partnership/Distribution</SelectItem>
                    <SelectItem value="likeness">Image/Artist Likeness</SelectItem>
                  </SelectContent>
                </Select>
                <Select value={status} onValueChange={setStatus}>
                  <SelectTrigger className="w-[160px] h-9">
                    <SelectValue placeholder="Status" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all-status">All Status</SelectItem>
                    <SelectItem value="draft">Draft</SelectItem>
                    <SelectItem value="out-for-signature">Out for Signature</SelectItem>
                    <SelectItem value="partially-signed">Partially Signed</SelectItem>
                    <SelectItem value="fully-signed">Fully Signed</SelectItem>
                    <SelectItem value="archived">Archived</SelectItem>
                  </SelectContent>
                </Select>
                <Select value={society} onValueChange={setSociety}>
                  <SelectTrigger className="w-[160px] h-9">
                    <SelectValue placeholder="Society" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all-societies">All Societies</SelectItem>
                    <SelectItem value="ASCAP">ASCAP</SelectItem>
                    <SelectItem value="BMI">BMI</SelectItem>
                    <SelectItem value="SESAC">SESAC</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              {/* Advanced Filters */}
              {showAdvancedFilters && (
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4 pt-4 border-t">
                  <div>
                    <label className="text-sm font-medium">Territory</label>
                    <Select>
                      <SelectTrigger className="h-9">
                        <SelectValue placeholder="All Territories" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="worldwide">Worldwide</SelectItem>
                        <SelectItem value="north-america">North America</SelectItem>
                        <SelectItem value="europe">Europe</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div>
                    <label className="text-sm font-medium">Expiry Status</label>
                    <Select>
                      <SelectTrigger className="h-9">
                        <SelectValue placeholder="All" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="active">Active</SelectItem>
                        <SelectItem value="expiring">Expiring Soon</SelectItem>
                        <SelectItem value="expired">Expired</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div>
                    <label className="text-sm font-medium">Owner</label>
                    <Select>
                      <SelectTrigger className="h-9">
                        <SelectValue placeholder="All Owners" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="john-smith">John Smith</SelectItem>
                        <SelectItem value="sarah-johnson">Sarah Johnson</SelectItem>
                        <SelectItem value="mike-wilson">Mike Wilson</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div>
                    <label className="text-sm font-medium">Date Range</label>
                    <Select>
                      <SelectTrigger className="h-9">
                        <SelectValue placeholder="All Time" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="last-7-days">Last 7 Days</SelectItem>
                        <SelectItem value="last-30-days">Last 30 Days</SelectItem>
                        <SelectItem value="last-90-days">Last 90 Days</SelectItem>
                        <SelectItem value="this-year">This Year</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
              )}
            </div>
          </CardContent>
        </Card>

        {/* Contracts Table */}
        <Card>
          <CardHeader>
            <div className="flex items-center justify-between">
              <h3 className="text-lg font-medium">Contracts ({filteredContracts.length})</h3>
              <div className="flex items-center gap-2 text-sm text-muted-foreground">
                <CheckSquare className="h-4 w-4" />
                {selectedContracts.length} selected
              </div>
            </div>
          </CardHeader>
          <CardContent>
            <div className="border rounded-lg">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead className="w-[50px]">
                      <Checkbox 
                        checked={selectedContracts.length === filteredContracts.length}
                        onCheckedChange={(checked) => {
                          if (checked) {
                            setSelectedContracts(filteredContracts.map(c => c.id));
                          } else {
                            setSelectedContracts([]);
                          }
                        }}
                      />
                    </TableHead>
                    <TableHead>Contract</TableHead>
                    <TableHead>Type</TableHead>
                    <TableHead>Parties</TableHead>
                    <TableHead>Splits</TableHead>
                    <TableHead>Society</TableHead>
                    <TableHead>Status</TableHead>
                    <TableHead>Expiry</TableHead>
                    <TableHead>Updated</TableHead>
                    <TableHead>Owner</TableHead>
                    <TableHead className="w-[50px]"></TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {filteredContracts.map((contract) => {
                    const expiryStatus = getExpiryStatus(contract.expiryDate);
                    return (
                      <TableRow 
                        key={contract.id}
                        className="cursor-pointer hover:bg-muted/50"
                        onClick={() => setSelectedContract(contract)}
                      >
                        <TableCell onClick={(e) => e.stopPropagation()}>
                          <Checkbox 
                            checked={selectedContracts.includes(contract.id)}
                            onCheckedChange={(checked) => handleContractSelection(contract.id, checked as boolean)}
                          />
                        </TableCell>
                        <TableCell className="font-medium">{contract.title}</TableCell>
                        <TableCell>
                          <Badge variant="outline">{contract.type}</Badge>
                        </TableCell>
                        <TableCell>
                          <div className="space-y-1">
                            {contract.parties.slice(0, 2).map((party: any, index: number) => (
                              <div key={index} className="text-sm">
                                {party.name} ({party.role})
                              </div>
                            ))}
                            {contract.parties.length > 2 && (
                              <div className="text-xs text-muted-foreground">
                                +{contract.parties.length - 2} more
                              </div>
                            )}
                          </div>
                        </TableCell>
                        <TableCell>
                          <div className="space-y-1">
                            {Object.entries(contract.splits).map(([key, value]) => (
                              <div key={key} className="text-sm font-mono">
                                {key}: {value}
                              </div>
                            ))}
                          </div>
                        </TableCell>
                        <TableCell>{contract.society}</TableCell>
                        <TableCell>
                          <div className="flex items-center gap-2">
                            {getStatusIcon(contract.status)}
                            <Badge className={getStatusColor(contract.status)}>
                              {contract.status}
                            </Badge>
                          </div>
                        </TableCell>
                        <TableCell>
                          <div className="flex items-center gap-2">
                            {expiryStatus.icon}
                            <span className={`text-sm ${expiryStatus.color}`}>
                              {contract.expiryDate}
                            </span>
                          </div>
                        </TableCell>
                        <TableCell>{contract.updated}</TableCell>
                        <TableCell>{contract.owner}</TableCell>
                        <TableCell>
                          <DropdownMenu>
                            <DropdownMenuTrigger asChild>
                              <Button variant="ghost" size="sm" onClick={(e) => e.stopPropagation()}>
                                <MoreHorizontal className="h-4 w-4" />
                              </Button>
                            </DropdownMenuTrigger>
                            <DropdownMenuContent align="end">
                              <DropdownMenuItem>
                                <Eye className="h-4 w-4 mr-2" />
                                View Details
                              </DropdownMenuItem>
                              <DropdownMenuItem>
                                <Edit className="h-4 w-4 mr-2" />
                                Edit Contract
                              </DropdownMenuItem>
                              <DropdownMenuItem>
                                <Send className="h-4 w-4 mr-2" />
                                Send for Signature
                              </DropdownMenuItem>
                              <DropdownMenuSeparator />
                              <DropdownMenuItem>
                                <FileDown className="h-4 w-4 mr-2" />
                                Download PDF
                              </DropdownMenuItem>
                              <DropdownMenuItem>
                                <Calendar className="h-4 w-4 mr-2" />
                                View Timeline
                              </DropdownMenuItem>
                              <DropdownMenuSeparator />
                              <DropdownMenuItem className="text-destructive">
                                <Trash2 className="h-4 w-4 mr-2" />
                                Archive
                              </DropdownMenuItem>
                            </DropdownMenuContent>
                          </DropdownMenu>
                        </TableCell>
                      </TableRow>
                    );
                  })}
                </TableBody>
              </Table>
            </div>
          </CardContent>
        </Card>

        {/* Enhanced Contract Details Sheet */}
        <Sheet open={!!selectedContract} onOpenChange={() => setSelectedContract(null)}>
          <SheetContent className="w-[800px] sm:max-w-[800px]">
            {selectedContract && (
              <>
                <SheetHeader>
                  <SheetTitle className="flex items-center gap-2">
                    <FileText className="h-5 w-5" />
                    {selectedContract.title}
                  </SheetTitle>
                </SheetHeader>
                <div className="mt-6 space-y-6">
                  <Tabs defaultValue="summary" className="w-full">
                    <TabsList className="grid w-full grid-cols-5">
                      <TabsTrigger value="summary">Summary</TabsTrigger>
                      <TabsTrigger value="parties">Parties & Rights</TabsTrigger>
                      <TabsTrigger value="timeline">Timeline</TabsTrigger>
                      <TabsTrigger value="attachments">Attachments</TabsTrigger>
                      <TabsTrigger value="audit">Audit Trail</TabsTrigger>
                    </TabsList>
                    
                    <TabsContent value="summary" className="space-y-6">
                      {/* Contract Summary */}
                      <div className="space-y-4">
                        <h3 className="font-medium">Contract Summary</h3>
                        <div className="grid grid-cols-2 gap-4 text-sm">
                          <div>
                            <span className="text-muted-foreground">Type:</span>
                            <p className="font-medium">{selectedContract.type}</p>
                          </div>
                          <div>
                            <span className="text-muted-foreground">Status:</span>
                            <div className="flex items-center gap-2 mt-1">
                              {getStatusIcon(selectedContract.status)}
                              <Badge className={getStatusColor(selectedContract.status)}>
                                {selectedContract.status}
                              </Badge>
                            </div>
                          </div>
                          <div>
                            <span className="text-muted-foreground">Society:</span>
                            <p className="font-medium">{selectedContract.society}</p>
                          </div>
                          <div>
                            <span className="text-muted-foreground">Territory:</span>
                            <p className="font-medium">{selectedContract.territory}</p>
                          </div>
                          <div>
                            <span className="text-muted-foreground">Expiry Date:</span>
                            <div className="flex items-center gap-2 mt-1">
                              {getExpiryStatus(selectedContract.expiryDate).icon}
                              <span className={`font-medium ${getExpiryStatus(selectedContract.expiryDate).color}`}>
                                {selectedContract.expiryDate}
                              </span>
                            </div>
                          </div>
                          <div>
                            <span className="text-muted-foreground">Owner:</span>
                            <p className="font-medium">{selectedContract.owner}</p>
                          </div>
                          {selectedContract.isrc && (
                            <div>
                              <span className="text-muted-foreground">ISRC:</span>
                              <p className="font-medium font-mono">{selectedContract.isrc}</p>
                            </div>
                          )}
                        </div>
                      </div>

                      {/* Key Details */}
                      {selectedContract.type === "Song" && (
                        <div className="space-y-4">
                          <h3 className="font-medium">Song Details</h3>
                          <div className="grid grid-cols-2 gap-4 text-sm">
                            <div>
                              <span className="text-muted-foreground">Recoupment:</span>
                              <p className="font-medium">{selectedContract.recoupment}</p>
                            </div>
                          </div>
                        </div>
                      )}

                      {selectedContract.type === "Partnership/Distribution" && (
                        <div className="space-y-4">
                          <h3 className="font-medium">Distribution Details</h3>
                          <div className="space-y-2 text-sm">
                            <div>
                              <span className="text-muted-foreground">DSP Platforms:</span>
                              <p className="font-medium">{selectedContract.dspPlatforms?.join(", ")}</p>
                            </div>
                            <div>
                              <span className="text-muted-foreground">Marketing Commitments:</span>
                              <p className="font-medium">{selectedContract.marketingCommitments}</p>
                            </div>
                          </div>
                        </div>
                      )}

                      {selectedContract.type === "Image/Artist Likeness" && (
                        <div className="space-y-4">
                          <h3 className="font-medium">Usage Details</h3>
                          <div className="space-y-2 text-sm">
                            <div>
                              <span className="text-muted-foreground">Usage Terms:</span>
                              <p className="font-medium">{selectedContract.usageTerms}</p>
                            </div>
                            <div>
                              <span className="text-muted-foreground">Media Types:</span>
                              <p className="font-medium">{selectedContract.mediaTypes?.join(", ")}</p>
                            </div>
                          </div>
                        </div>
                      )}
                    </TabsContent>

                    <TabsContent value="parties" className="space-y-4">
                      <h3 className="font-medium">Parties & Rights</h3>
                      <div className="space-y-4">
                        {selectedContract.parties.map((party: any, index: number) => (
                          <div key={index} className="border rounded-lg p-4">
                            <div className="flex items-center justify-between mb-2">
                              <h4 className="font-medium">{party.name}</h4>
                              <Badge variant="outline">{party.role}</Badge>
                            </div>
                            <div className="grid grid-cols-2 gap-4 text-sm">
                              <div>
                                <span className="text-muted-foreground">Rights Type:</span>
                                <p className="font-medium">{party.type}</p>
                              </div>
                              <div>
                                <span className="text-muted-foreground">Percentage:</span>
                                <p className="font-medium">{party.percentage}%</p>
                              </div>
                            </div>
                          </div>
                        ))}
                      </div>
                    </TabsContent>

                    <TabsContent value="timeline" className="space-y-4">
                      <h3 className="font-medium">Signature Timeline</h3>
                      <div className="space-y-3">
                        {selectedContract.auditTrail.map((event: any, index: number) => (
                          <div key={index} className="flex items-center gap-3 text-sm">
                            <div className="h-2 w-2 rounded-full bg-blue-500"></div>
                            <span className="text-muted-foreground">{event.action}</span>
                            <span className="font-medium">{event.date}</span>
                            <span className="text-muted-foreground">by {event.user}</span>
                          </div>
                        ))}
                      </div>
                    </TabsContent>

                    <TabsContent value="attachments" className="space-y-4">
                      <h3 className="font-medium">Supporting Documents</h3>
                      <div className="space-y-2">
                        {selectedContract.attachments.map((attachment: string, index: number) => (
                          <div key={index} className="flex items-center justify-between p-3 border rounded-lg">
                            <div className="flex items-center gap-3">
                              <FileText className="h-4 w-4 text-muted-foreground" />
                              <span className="text-sm">{attachment}</span>
                            </div>
                            <Button variant="outline" size="sm">
                              <FileDown className="h-4 w-4 mr-2" />
                              Download
                            </Button>
                          </div>
                        ))}
                      </div>
                    </TabsContent>

                    <TabsContent value="audit" className="space-y-4">
                      <h3 className="font-medium">Audit Trail</h3>
                      <div className="space-y-3">
                        {selectedContract.auditTrail.map((event: any, index: number) => (
                          <div key={index} className="border rounded-lg p-3">
                            <div className="flex items-center justify-between mb-2">
                              <span className="font-medium">{event.action}</span>
                              <span className="text-sm text-muted-foreground">{event.date}</span>
                            </div>
                            <div className="text-sm text-muted-foreground">
                              {event.details}
                            </div>
                            <div className="text-xs text-muted-foreground mt-1">
                              User: {event.user}
                            </div>
                          </div>
                        ))}
                      </div>
                    </TabsContent>
                  </Tabs>

                  {/* Actions */}
                  <div className="space-y-3 pt-4 border-t">
                    <div className="grid grid-cols-2 gap-3">
                      <Button className="w-full">
                        <Send className="h-4 w-4 mr-2" />
                        Send for Signature
                      </Button>
                      <Button variant="outline" className="w-full">
                        <FileDown className="h-4 w-4 mr-2" />
                        Download PDF
                      </Button>
                    </div>
                    <div className="grid grid-cols-3 gap-3">
                      <Button variant="outline" size="sm">
                        <Edit className="h-4 w-4 mr-2" />
                        Edit
                      </Button>
                      <Button variant="outline" size="sm">
                        <Calendar className="h-4 w-4 mr-2" />
                        Renewal
                      </Button>
                      <Button variant="outline" size="sm">
                        <Shield className="h-4 w-4 mr-2" />
                        Compliance
                      </Button>
                    </div>
                  </div>
                </div>
              </>
            )}
          </SheetContent>
        </Sheet>
      </div>
    </AppLayout>
  );
}